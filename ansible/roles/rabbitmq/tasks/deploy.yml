---

- name: mkdir {{ kubernetes.root.path }}/{{ namespace }}
  file:
    path: "{{ kubernetes.root.path }}/{{ namespace }}/"
    state: directory

- name: copy {{ resource }} templates for {{ namespace }}
  copy: 
    src: "files/"
    dest: "{{ kubernetes.root.path }}/{{ namespace }}/"

- name: render rabbitmq {{ ressouce }} templates for {{ namespace }}
  template:
    src: "rabbitmq-{{ ressouce }}.yaml.j2"
    dest: "{{ kubernetes.root.path }}/{{ namespace }}/rabbitmq-{{ ressouce }}.yaml"
  with_items:
    - ingress
  loop_control:
    loop_var: ressouce

- name: rabbitmq secret configuration
  kubernetes:
    state:     "{{ deploy_state }}"
    name:      rabbitmq
    resource:  secret
    namespace: "{{ namespace }}"
    manifest:  "gs://{{ vault.root.path }}/{{ namespace }}/rabbitmq/rabbitmq-secret.yaml"

- name: deploy rabbitmq {{ resource }} in {{ namespace }}
  kubernetes:
    state:     "{{ deploy_state }}"
    name:      "rabbitmq-{{ resource }}"
    resource:  "{{ resource }}"
    namespace: "{{ namespace }}"
    manifest:  "{{ kubernetes.root.path }}/{{ namespace }}/rabbitmq-{{ resource }}.yaml"
  with_items:
    - statefulset
    - service
    - ingress
  loop_control:
    loop_var: resource

- name: deploy rabbitmq discovery {{ resource }} in {{ namespace }}
  kubernetes:
    state:     "{{ deploy_state }}"
    name:      "rabbitmq-discovery-{{ resource }}"
    resource:  "{{ resource }}"
    namespace: "{{ namespace }}"
    manifest:  "{{ kubernetes.root.path }}/{{ namespace }}/rabbitmq-discovery-{{ resource }}.yaml"
  with_items:
    - service
  loop_control:
    loop_var: resource

- name: proxy rabbitmq
  shell: >
    kubectl port-forward rabbitmq-0 -n {{ namespace }} 15672 &
  register: port_forward

- name: proxy pid
  shell: "echo {{ port_forward.stderr }} | awk '{print $2}'"
  register: proxy_pid

- debug: var=proxy_pid.stdout

- name: wait until the rabbitmq is up and running
  wait_for:
    delay: 2
    host: 127.0.0.1
    port: 15672
    timeout: 60

- name: create user
  uri:
    url: "http://{{ cluster_admin }}:{{ cluster_password }}127.0.0.115672//api/users/{{ user.name }}/"
    method: PUT
    body: >
        '{"password":"{{ user.password }}", "tags":"administrator,management"}'
    body_format: json
    status_code: 200
  with:
    - {"name":"bob", "password":"secret"}

- name: create user
  uri:
    url: "http://{{ cluster_admin }}:{{ cluster_password }}127.0.0.115672//api/users/{{ username }}/"
    method: PUT
    body: >
        '{"password":"{{ password }}", "tags":"administrator,management"}'
    body_format: json
    status_code: 200


- name: terminate proxy
  shell: "kill {{ proxy_pid.stdout }}"
  register: terminte_proxy
- debug: var=terminte_proxy
