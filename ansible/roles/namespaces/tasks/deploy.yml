---

- name: set namespace to {{ item }}
  set_fact:
    namespace: "{{ item }}"

- debug: var=namespace
- debug: var=kubernetes.root.path

- name: "mkdir {{ kubernetes.root.path }}/{{ namespace }}"
  file:
    path: "{{ kubernetes.root.path }}/{{ namespace }}"
    state: directory

- name: render admin-role.yaml for namespace {{ namespace }}
  template:
    src: "templates/admin-role.yaml.j2"
    dest: "{{ kubernetes.root.path }}/{{ namespace }}/admin-role.yaml"

- name: render developer-role.yaml for namespace {{ namespace }}
  template:
    src: "templates/developer-role.yaml.j2"
    dest: "{{ kubernetes.root.path }}/{{ namespace }}/developer-role.yaml"

- name: create namespace {{namespace}}
  kubernetes:
    state:     present
    name:      "{{ namespace }}"
    resource:  namespace

- name: create admin role for namespace {{namespace}}
  kubernetes:
    state:     present
    name:      "{{ rbac_namespace }}:admin"
    resource:  role
    namespace: "{{ namespace }}"
    manifest:  "{{ kubernetes.root.path }}/{{ namespace }}/admin-role.yaml"

- name: create developer role for namespace {{namespace}}
  kubernetes:
    state:     present
    name:      "{{ rbac_namespace }}:developer"
    resource:  role
    namespace: "{{ namespace }}"
    manifest:  "{{ kubernetes.root.path }}/{{ namespace }}/developer-role.yaml"

- name: dockerhub credentials for namespace {{ namespace }} status
  kubernetes:
    state:     status
    name:      docker-hub-private-registry
    resource:  secret
    type:      docker-registry
    namespace: "{{ namespace }}"
  register: dockerub_secret_status


- name: obtain private dockerhub credentials
  shell: |
    gsutil cat gs://{{ bucket }}/hub.docker.com/docker-config.json
  register: dockerhub_credentials
  when: dockerub_secret_status.meta.present == false
  
- name: parse dockerhub credentials
  set_fact:
    credentials: "{{ dockerhub_credentials.stdout | from_json }}"
  when: dockerub_secret_status.meta.present == false

- name: dockerhub credentials for namespace {{ namespace }}
  kubernetes:
    state:     present
    name:      docker-hub-private-registry
    resource:  secret
    type:      docker-registry
    namespace: "{{ namespace }}"
    options: >
      --docker-server={{ credentials.url }} \
      --docker-username={{ credentials.username }} \
      --docker-password={{ credentials.password }} \
      --docker-email={{ credentials.email }}
  when: dockerub_secret_status.meta.present == false
